package src.views;

import src.ATM.Deposit;
import src.ATM.Withdraw;
import src.Database.Controllers.AccountController;
import src.Database.Controllers.CurrencyController;
import src.Database.Models.Account;
import src.account.ProcessData;
import src.transaction.TransactionFactory;
import src.views.formatter.AccountView;
import src.views.formatter.BalanceView;
import src.views.formatter.CurrencyView;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * The TransactionPage class represents a page in a GUI application that allows users to perform transactions on their accounts.
 * The transactions that can be performed include depositing money, withdrawing money, and transferring money between accounts.
 * The TransactionPage class depends on several other classes, including Deposit, Withdraw, AccountController, Account, ProcessData, and TransactionFactory.
 */
public class TransactionPage extends PageBack {
    private static final String LOAN_TYPE = "Loan";

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(13, 4, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(12, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        typeLabel = new JLabel();
        typeLabel.setText("<Type of transaction>");
        panel.add(typeLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        targetAccountLabel = new JLabel();
        targetAccountLabel.setText("Target Account Number");
        panel.add(targetAccountLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Amount");
        panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Currency");
        panel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel.add(amountTextField, new com.intellij.uiDesigner.core.GridConstraints(7, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        errorLabel = new JLabel();
        errorLabel.setForeground(new Color(-65536));
        errorLabel.setText("");
        panel.add(errorLabel, new com.intellij.uiDesigner.core.GridConstraints(8, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        submitButton = new JButton();
        submitButton.setText("Submit");
        panel.add(submitButton, new com.intellij.uiDesigner.core.GridConstraints(11, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel.add(cancelButton, new com.intellij.uiDesigner.core.GridConstraints(11, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel.add(currencyComboBox, new com.intellij.uiDesigner.core.GridConstraints(6, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        targetComboBox = new JComboBox();
        panel.add(targetComboBox, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Your Account");
        panel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sourceAccountLabel = new JLabel();
        sourceAccountLabel.setText("<source account>");
        panel.add(sourceAccountLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        panel.add(toolBar$Separator1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JToolBar.Separator toolBar$Separator2 = new JToolBar.Separator();
        panel.add(toolBar$Separator2, new com.intellij.uiDesigner.core.GridConstraints(10, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Personal Note");
        panel.add(label4, new com.intellij.uiDesigner.core.GridConstraints(9, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        noteTextField = new JFormattedTextField();
        panel.add(noteTextField, new com.intellij.uiDesigner.core.GridConstraints(9, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        targetErrorLabel = new JLabel();
        targetErrorLabel.setForeground(new Color(-65536));
        targetErrorLabel.setText("");
        panel.add(targetErrorLabel, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    public enum TYPE {
        DEPOSIT, WITHDRAW, TRANSACTION
    }

    private TYPE type;
    private final Account account;
    private ArrayList<Long> targetAccountNumbers;
    private JLabel typeLabel;
    private JFormattedTextField amountTextField;
    private JButton submitButton;
    private JLabel errorLabel;
    private JButton cancelButton;
    private JPanel panel;
    private JLabel targetAccountLabel;
    private JComboBox<String> currencyComboBox;
    private JComboBox<String> targetComboBox;
    private JLabel sourceAccountLabel;
    private JFormattedTextField noteTextField;
    private JLabel targetErrorLabel;
    private static final TransactionFactory transactionFactory = new TransactionFactory();

    private void createUIComponents() {
        currencyComboBox = new JComboBox<>(new DefaultComboBoxModel<>(CurrencyView.getCurrencyList()));
        amountTextField = BalanceView.getMoneyTextField();
    }

    public TransactionPage(Account account) {
        this.account = account;
        $$$setupUI$$$();
        updateTargetList();

        currencyComboBox.setSelectedItem(CurrencyView.formatCurrency(account.getAccountCurrency()));
        sourceAccountLabel.setText(AccountView.getType(account) + " " +
                String.format("$ %.2f", (new AccountController()).getAccountBalance(account.getAccountNumber())));
        this.initListener();
    }

    private void initListener() {
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                headBack();
            }
        });
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (amountTextField.getText().length() == 0) {
                    errorLabel.setText("* The amount cannot be zero.");
                    return;
                }
                switch (type) {
                    case DEPOSIT:
                        if (account.getType().equalsIgnoreCase(LOAN_TYPE)) {
                            return;
                        }
                        (new Deposit()).depositMoney(
                                account.getAccountNumber(),
                                Double.parseDouble(amountTextField.getText().replace(",", "")),
                                currencyComboBox.getItemAt(currencyComboBox.getSelectedIndex())
                        );
                        break;
                    case WITHDRAW:
                        boolean success = (new Withdraw()).withdrawMoney(
                                account.getAccountNumber(),
                                Double.parseDouble(amountTextField.getText().replace(",", "")),
                                currencyComboBox.getItemAt(currencyComboBox.getSelectedIndex())
                        );
                        if (!success) {
                            errorLabel.setText("Sorry, you cannot withdraw this amount.");
                        }
                        break;
                    case TRANSACTION:
                        double amount = Double.parseDouble(amountTextField.getText().replace(",", ""));
                        String currency = currencyComboBox.getItemAt(currencyComboBox.getSelectedIndex());
                        CurrencyController currencyController = new CurrencyController();
                        amount = currencyController.getAmountInUSD(amount, currency);
                        if (targetComboBox.getSelectedIndex() < 0 || targetComboBox.getSelectedIndex() > targetAccountNumbers.size()) {
                            targetErrorLabel.setText("* The target account is invalid.");
                            return;
                        }
                        if (account.getType().equalsIgnoreCase(LOAN_TYPE)) {
                            boolean result = transactionFactory.processTransfer(account.getAccountNumber(),
                                    amount,
                                    noteTextField.getText(), targetAccountNumbers.get(targetComboBox.getSelectedIndex()));
                            if (!result) {
                                errorLabel.setText("* This transaction is invalid.");
                                return;
                            }
                        } else {
                            transactionFactory.processTransfer(account.getAccountNumber(), targetAccountNumbers.get(targetComboBox.getSelectedIndex()),
                                    amount, noteTextField.getText());
                        }
                        break;
                }
                headBack();
            }
        });
    }

    public JPanel getPanel() {
        return panel;
    }

    public void setType(TYPE type) {
        this.type = type;
        switch (type) {
            case DEPOSIT:
                typeLabel.setText("[Deposit] Save some money into the account.");
                targetAccountLabel.setVisible(false);
                targetComboBox.setVisible(false);
                break;
            case WITHDRAW:
                typeLabel.setText("[Withdraw] Take some money out of the account.");
                targetAccountLabel.setVisible(false);
                targetComboBox.setVisible(false);
                break;
            case TRANSACTION:
                typeLabel.setText("[Transaction] Send some money to another account.");
                break;
        }
    }

    private void updateTargetList() {
        HashMap<String, Long> accounts = (new ProcessData()).getAccountsToTransferTo(account.getUserId(), account.getAccountNumber());
        this.targetAccountNumbers = new ArrayList<>(accounts.values());

        ArrayList<String> targets = new ArrayList<>();
        for (String name : accounts.keySet()) {
            targets.add(name + " #" + accounts.get(name));
        }
        targetComboBox.setModel(new DefaultComboBoxModel<>(targets.toArray(new String[0])));
    }
}
